import json
import tempfile

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.types import FSInputFile

from app.db.connection import session_context
from app.schemas import SettingPatchWithKey
from app.utils.common import create_postgres_backup
from app.utils.queries import get_last_data_for_sensors, save_multiple_settings
from app.utils.weather_predict import get_data_weather_prediction

router = Router()


@router.message(Command("start"))
async def start_handler(message: types.Message):
    """Send welcome message and list of available commands"""
    await message.answer(
        "üåç <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —É–º–Ω–æ–π –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏–∏!</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥\n"
        "/weather - –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞\n"
        "/predict - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n"
        "/plot - –ì—Ä–∞—Ñ–∏–∫ –ø–æ–≥–æ–¥—ã\n"
        "/backup - –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è\n"
        "/settings - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n",
        parse_mode="HTML",
    )


@router.message(Command("help"))
async def help_handler(message: types.Message):
    """Send detailed help message with command descriptions and settings info"""
    await message.answer(
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏\n"
        "/weather - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É\n"
        "/predict - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –æ—Å–∞–¥–∫–æ–≤\n"
        "/plot [n] - –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞ n —á–∞—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6)\n"
        "/backup - –°–∫–∞—á–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
        "/settings <json> - –û–±–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n"
        "- latitude (float)\n"
        "- longitude (float)\n"
        "- sensor_poll_interval_ms (int)\n"
        "- co2_alert_threshold (int)\n"
        "- tvoc_alert_threshold (int)\n"
        "- telegram_bot_token (str)\n"
        "- telegram_webhook_url (str)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        '/settings [{"key": "sensor_poll_interval_ms", "value": "60000", '
        '"type": "int"}]',
    )


@router.message(Command("weather"))
async def weather_handler(message: types.Message):
    """Fetch and display current weather data"""
    await message.answer("–ü–æ–ª—É—á–∞—é —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É... ‚åõ")

    async with session_context() as session:
        weather = await get_last_data_for_sensors(session)

    text = (
        "<b>üå° –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏:</b>\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['central'].temperature} ¬∞C\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['central'].humidity} %\n"
        f"üìà –î–∞–≤–ª–µ–Ω–∏–µ: {weather['central'].pressure} –º–º —Ä—Ç.—Å—Ç.\n"
        f"ü´Å CO‚ÇÇ: {weather['central'].co2} ppm\n"
        f"üå´ TVOC: {weather['central'].tvoc} ppb\n\n"
        "<b>üå§ –£–ª–∏—á–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏:</b>\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['outdoor'].temperature} ¬∞C\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['outdoor'].humidity} %\n"
        f"üìà –î–∞–≤–ª–µ–Ω–∏–µ: {weather['outdoor'].pressure} –º–º —Ä—Ç.—Å—Ç.\n\n"
        "<b>üåç –í–Ω–µ—à–Ω—è—è –ø–æ–≥–æ–¥–∞:</b>\n"
        f"‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {weather['external_weather'].weather_description}\n"
        f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather['external_weather'].temperature_feels_like} ¬∞C\n"
        f"üåß –û—Å–∞–¥–∫–∏: {weather['external_weather'].precipitation} –º–º\n"
        f"üîÜ –£–§-–∏–Ω–¥–µ–∫—Å: {weather['external_weather'].uv_index}\n"
        f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather['external_weather'].wind_speed} –º/—Å"
    )

    await message.answer(text, parse_mode="HTML")


@router.message(Command("predict"))
async def predict_handler(message: types.Message):
    """Fetch and display predicted weather information"""
    await message.answer("–°—Ç—Ä–æ—é –ø—Ä–æ–≥–Ω–æ–∑... ‚õÖ")

    async with session_context() as session:
        predict = await get_data_weather_prediction(session)

    await message.answer(
        f"üì° <b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ 6—á:</b>\n\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{predict['predicted_temp']} ¬∞C</b>\n"
        f"üåß –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: <b>{'–î–∞ ‚òîÔ∏è' if predict['predicted_rain'] else '–ù–µ—Ç üå§'}"
        "</b>",
        parse_mode="HTML",
    )


@router.message(Command("plot"))
async def plot_handler(message: types.Message):
    """Generate and send weather sensor data plot"""
    args = message.text.strip().split()
    try:
        hours = int(args[1]) if len(args) > 1 else 6
        if not (1 <= hours <= 168):
            raise ValueError
    except (IndexError, ValueError):
        await message.answer(
            "‚ö†Ô∏è –£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –æ—Ç 1 –¥–æ 168, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/plot 24"
        )
        return

    await message.answer(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á... üî¨")

    try:
        async with session_context() as session:
            from app.utils.common import generate_weather_plot

            response = await generate_weather_plot(session, hours)
            tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
            async for chunk in response.body_iterator:
                tmp.write(chunk)
            tmp.close()

        await message.answer_photo(
            photo=FSInputFile(tmp.name), caption=f"üìà –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á."
        )

    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")


@router.message(Command("backup"))
async def backup_handler(message: types.Message):
    """Create and send system settings backup"""
    await message.answer("–°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é... üìÅ")

    try:
        file_response = await create_postgres_backup()
        file_path = file_response.path

        await message.answer_document(
            document=FSInputFile(file_path), caption="üìÑ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")


@router.message(Command("settings"))
async def settings_handler(message: types.Message):
    """Parse JSON payload and send it to settings update endpoint"""
    text = message.text.removeprefix("/settings").strip()

    if not text:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–¥–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "/settings [{\"key\": \"sensor_poll_interval_ms\", "
            "\"value\": 60000, \"type\": \"int\"}]"
        )
        return

    try:
        raw = json.loads(text)
        payload = [SettingPatchWithKey(**item) for item in raw]

        async with session_context() as session:
            await save_multiple_settings(session, payload)

        await message.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    except json.JSONDecodeError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")


@router.message(F.text)
async def echo_text(message: types.Message):
    """Echo back any text message"""
    await message.answer(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {message.text}")
